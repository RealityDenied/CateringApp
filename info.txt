Flowchart of data flow 

[Client] 
   |
   V
[Router] 
   |
   V
[Controller]
   |
   V
[Service]
   |
   V
[Model]
   |
   V
[MongoDB]

The controller awaits the service,
the service awaits the model/database,
and the model/database returns a Promise for the database save.

Execution pauses at each await until the Promise resolves (or rejects), then continues.


Instead of MVC the code simply means this 


START--------------------------------------------

const UserModel = require('../model/user.model');

exports.register = async (req, res, next) => {
    try {
        const { email, password } = req.body;
        const createUser = new UserModel({ email, password });
        const successRes = await createUser.save();
        res.json({ status: true, success: "User registered", data: successRes });
    } catch (error) {
        throw error;
    }
}

END------------------------------------------------

What a Promise is (something that represents a value available in the future)

How async functions always return a Promise

How await “pauses” code until the Promise resolves or rejects



